generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  clerkId   String    @unique
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isAdmin   Boolean   @default(false)
  bookings  Booking[]
}

model Booking {
  id              String        @id @default(cuid())
  fullName        String
  email           String
  phone           String
  participants    Int
  vehicleTypes    VehicleType[] @relation("BookingVehicles")
  vehicleCount    Int
  accommodation   String
  arrivalDate     DateTime
  departureDate   DateTime
  specialRequests String?
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String?
  slotId          String
  slot            BookingSlot   @relation(fields: [slotId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  bookingSlots    BookingSlot[] @relation("BookingSlots")
}

model BookingSlot {
  id              String    @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  totalCapacity   Int
  availableSpots  Int
  price           Float
  description     String?
  isActive        Boolean   @default(true)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[] @relation("BookingSlots")
  primaryBookings Booking[]
}

model Accommodation {
  id             String   @id @default(cuid())
  name           String
  type           String
  description    String?
  price          Float
  capacity       Int
  availableUnits Int
  amenities      String[]
  isActive       Boolean  @default(true)
  imageUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model VehicleType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[] @relation("BookingVehicles")
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SponsorTier {
  GOLD
  SILVER
  BRONZE
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String
  description String
  websiteUrl  String      @unique
  logoUrl     String
  tier        SponsorTier
  amount      Float       @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SponsorRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String
  website   String?
  message   String
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String
  startTime   String
  location    String
  activities  String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
